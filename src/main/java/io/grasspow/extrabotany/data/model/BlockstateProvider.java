package io.grasspow.extrabotany.data.model;

import io.grasspow.extrabotany.api.ExtraBotanyAPI;
import io.grasspow.extrabotany.common.libs.LibMisc;
import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.data.PackOutput;
import net.minecraft.data.models.model.ModelTemplate;
import net.minecraft.data.models.model.TextureMapping;
import net.minecraft.data.models.model.TextureSlot;
import net.minecraft.world.level.block.Block;
import org.slf4j.Logger;
import vazkii.botania.common.block.BotaniaFlowerBlock;
import vazkii.botania.common.block.decor.BotaniaMushroomBlock;
import vazkii.botania.common.block.decor.FloatingFlowerBlock;
import vazkii.botania.xplat.XplatAbstractions;

import java.util.Optional;
import java.util.Set;
import java.util.function.Predicate;
import java.util.stream.Collectors;

import static net.minecraft.data.models.model.ModelLocationUtils.getModelLocation;
import static vazkii.botania.common.lib.ResourceLocationHelper.prefix;

public class BlockstateProvider extends vazkii.botania.data.BlockstateProvider {
    public BlockstateProvider(PackOutput packOutput) {
        super(packOutput);
    }

    @Override
    public String getName() {
        return "ExtraBotany Blockstates";
    }

    @Override
    protected Logger getLogger() {
        return ExtraBotanyAPI.logger;
    }

    @Override
    protected void registerStatesAndModels() {
        Set<Block> remainingBlocks = BuiltInRegistries.BLOCK.stream()
                .filter(b -> LibMisc.MOD_ID.equals(BuiltInRegistries.BLOCK.getKey(b).getNamespace()))
                .collect(Collectors.toSet());

        //flower
        takeAll(remainingBlocks, b -> b instanceof FloatingFlowerBlock).forEach(b -> {
            // Models generated by FloatingFlowerModelProvider
            singleVariantBlockState(b, getModelLocation(b));
        });
        Predicate<Block> flowers = b -> XplatAbstractions.INSTANCE.isSpecialFlowerBlock(b)
                || b instanceof BotaniaMushroomBlock
                || b instanceof BotaniaFlowerBlock;
        ModelTemplate crossTemplate = new ModelTemplate(Optional.of(prefix("block/shapes/cross")), Optional.empty(), TextureSlot.CROSS);
        takeAll(remainingBlocks, flowers).forEach(b -> singleVariantBlockState(b, crossTemplate.create(b, TextureMapping.cross(b), this.modelOutput)));

    }
}
